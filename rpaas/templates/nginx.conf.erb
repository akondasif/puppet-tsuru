user <%= @nginx_user %>;
worker_processes  <%= @nginx_worker_processes %>;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections  <%= @nginx_worker_connections %>;
}


http {
    include      mime.types;
    default_type application/octet-stream;
    server_tokens off;

    sendfile          on;
    keepalive_timeout 65;

<% if @nginx_request_id_enabled -%>
    uuid4 $request_id_uuid;
    map $http_x_request_id $request_id_final {
      default $request_id_uuid;
      "~." $http_x_request_id;
    }
<% end -%>

<% if @nginx_local_log -%>
    access_log /var/log/nginx/access.log main;
    error_log  /var/log/nginx/error.log;
<% end -%>

<% if @nginx_syslog_server -%>
    log_format main
      '${remote_addr}\t${host}\t${request_method}\t${request_uri}\t${server_protocol}\t'
      '${http_referer}\t${http_x_mobile_group}\t'
      'Local:\t${status}\t*${connection}\t${body_bytes_sent}\t${request_time}\t'
      'Proxy:\t${upstream_addr}\t${upstream_status}\t${upstream_cache_status}\t'
      '${upstream_response_length}\t${upstream_response_time}\t${request_uri}\t'
<% if @nginx_request_id_enabled -%>
      'Agent:\t${http_user_agent}\t$request_id_final\t'
<% else -%>
      'Agent:\t${http_user_agent}\t'
<% end -%>
      'Fwd:\t${http_x_forwarded_for}';

    access_log syslog:server=<%= @nginx_syslog_server %>,facility=local6,tag=<%= @nginx_syslog_tag ? @nginx_syslog_tag : 'rpaas' %> main;
    error_log syslog:server=<%= @nginx_syslog_server %>,facility=local6,tag=<%= @nginx_syslog_tag ? @nginx_syslog_tag : 'rpaas' %>;
<% end -%>

<% @nginx_custom_error_codes.each do |file, codes| -%>
    error_page <%= codes.join(" ") %> /_nginx_errordocument/<%= file %>;
<% end -%>

    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=rpaas:<%= @nginx_key_zone_size %> inactive=<%= @nginx_cache_inactive %> max_size=<%= @nginx_cache_size %> loader_files=50;
    proxy_temp_path  /var/cache/nginx_temp 1 2;

    gzip                on;
    gzip_buffers        128 4k;
    gzip_comp_level     5;
    gzip_http_version   1.0;
    gzip_min_length     20;
    gzip_proxied        any;
    gzip_vary           on;
    # Additional types, "text/html" is always compressed:
    gzip_types          application/atom+xml application/javascript
                        application/json application/rss+xml
                        application/xml application/x-javascript
                        text/css text/javascript text/plain text/xml;
<% if @nginx_vts_enabled -%>
    vhost_traffic_status_zone;
<% end -%>
    server {
        listen     <%= @nginx_admin_listen %>;
        server_name  _tsuru_nginx_admin;

        location /healthcheck {
            echo "WORKING";
        }
<% if @nginx_location_purge -%>

        location ~ ^/purge/(.+) {
<% @nginx_allow_admin_list.each do |ip| -%>
            allow           <%= ip %>;
<% end -%>
            deny            all;
            proxy_cache_purge  rpaas $1$is_args$args;
        }
<% end -%>
<% if @nginx_vts_enabled -%>

        location /vts_status {
          vhost_traffic_status_display;
          vhost_traffic_status_display_format json;
        }
<% end -%>

<% if @nginx_session_resumption -%>
        location /key_set {
            content_by_lua '
            function dec(data)
                          local b="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
              data = string.gsub(data, "[^"..b.."=]", "")
              return (data:gsub(".", function(x)
            if (x == "=") then return "" end
            local r,f="",(b:find(x)-1)
            for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and "1" or "0") end
            return r;
              end):gsub("%d%d%d?%d?%d?%d?%d?%d?", function(x)
            if (#x ~= 8) then return "" end
            local c=0
            for i=1,8 do c=c+(x:sub(i,i)=="1" and 2^(8-i) or 0) end
            return string.char(c)
              end))
            end
            local memcached = require "resty.memcached"
            local memc, err = memcached:new()
            local floor = math.floor
            local time_slot = 60
            local now = ngx.time()

            if not memc then
                ngx.say("failed to instantiate memc: ", err)
                return
            end

            memc:set_timeout(1000) -- 1 sec

            -- or connect to a unix domain socket file listened
            -- by a memcached server:
            --     local ok, err = memc:connect("unix:/path/to/memc.sock")

            local ok, err = memc:connect("127.0.0.1", 11211)
            if not ok then
                ngx.say("failed to connect: ", err)
                return
            end

            ngx.req.read_body()
            session_key = dec(ngx.req.get_body_data())
            previous_time_slot = floor(now / time_slot) * time_slot - time_slot
            current_time_slot = floor(now / time_slot) * time_slot
            next_time_slot = floor(now / time_slot) * time_slot + time_slot
                    local ok, err = memc:set("ticket-key-" .. next_time_slot, session_key)
                    if not ok then
                        ngx.say("failed to set session_key on memcached: ", err)
                        return
                    end
            local res, flags, err = memc:get("ticket-key-" .. next_time_slot)
                    ngx.say("key has set to " .. next_time_slot .. " with " .. res)
                ';
            }
<% end -%>
    }

    include sites-enabled/consul/blocks/http.conf;

<% if @nginx_lua -%>
    lua_package_path "/usr/local/share/lualib/?.lua;;";
    lua_shared_dict my_cache 10m;
    lua_shared_dict locks 1m;
    include sites-enabled/consul/blocks/lua_*.conf;
<% end -%>

    server {
        listen <%= @nginx_listen %> default_server backlog=<%= @sysctl_somaxconn %>;
        listen <%= @nginx_ssl_listen %> ssl default_server backlog=<%= @sysctl_somaxconn %>;

        ssl_certificate /etc/nginx/certs/nginx.crt;
        ssl_certificate_key /etc/nginx/certs/nginx.key;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:200m;
        ssl_session_timeout 1h;
<% if @nginx_dhparams -%>
        ssl_dhparam <%= @nginx_dhparams %>;
<% end -%>

        server_name  _tsuru_nginx_app;
        port_in_redirect off;

        proxy_cache rpaas;
        proxy_cache_use_stale error timeout updating invalid_header http_500 http_502 http_503 http_504;
        proxy_cache_lock on;
        proxy_cache_lock_age 60s;
        proxy_cache_lock_timeout 60s;
        more_set_input_headers "X-Real-IP: $remote_addr";
        more_set_input_headers "X-Forwarded-For: $proxy_add_x_forwarded_for";
        more_set_input_headers "X-Forwarded-Proto: $scheme";
        more_set_input_headers "X-Forwarded-Host: $host";
<% if @nginx_request_id_enabled -%>
        more_set_input_headers "X-Request-ID: $request_id_final";
<% if not @nginx_disable_response_request_id -%>
        more_set_headers "X-Request-ID: $request_id_final";
<% end -%>
<% end -%>
        proxy_read_timeout 20s;
        proxy_connect_timeout 10s;
        proxy_send_timeout 20s;
        proxy_http_version 1.1;
<% if @nginx_location_purge -%>
        proxy_cache_key $scheme$request_uri;
<% end -%>
<% if @nginx_custom_error_dir and @nginx_intercept_errors -%>
        proxy_intercept_errors on;
<% end -%>

<% if @nginx_custom_error_dir -%>
        location ~ ^/_nginx_errordocument/(.+) {
            internal;
            alias <%= @nginx_custom_error_dir %>/$1;
        }
<% end -%>

        include sites-enabled/consul/*.conf;
        include sites-enabled/consul/blocks/server.conf;
    }
}
